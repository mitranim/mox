| Extends `./sketch_syn_indent_base.mox`.
|
| # Overview
|
| Extensions to the base syntax:
|
| * Use the "one two three" syntax (subsequent tokens not separated by newline)
|   for namespace access / method call.
|   * Works exactly like `one.two.three` in recent languages.
|   * Every subsequent token must be an identifier.
|   * "expr identifier" calls method "identifier" on "expr".
|     * The call is always nullary.
|   * Method lookup is performed at compile time.
|   * Precedence is left-associative. We allow any number of subsequent
|     identifiers, for nested method calls.
| * Functions have access to context/receiver, available under the contextual
|   identifier `self`, similar to many OO languages.

| # Examples

| * At compile time, finds the function `meth_1` associated with `ns_0`.
| * At runtime, calls `meth_1`, passing `ns_0` as receiver.
| * Calls the final output, recursively.
| * All calls are nullary.
ns_0 meth_1

| * At compile time, finds the function `middle` associated with `outer`.
| * At runtime, calls `middle`, passing `outer` as receiver.
| * At compile time, finds the function `inner` associated with `middle`.
| * At runtime, calls `inner`, passing `middle` as receiver.
| * Calls the final output, recursively.
| * All calls are nullary.
outer middle inner

| * At compile time, finds the function `meth_1` associated with `ns_0`, and
|   verifies arity and argument types.
| * At runtime, calls `meth_1`, passing `ns_0` as receiver and the two
|   arguments.
| * Calls the final output without arguments, recursively.
ns_0 meth_1 arg_2 arg_3

| Parse error: method names must be identifiers.
ns_0 10

| Parse error: method names must be identifiers.
ns_0 `some_string`

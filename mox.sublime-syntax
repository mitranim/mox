%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - mox
scope: source.mox

variables:
  ident: \b[[:alpha:]_][[:alnum:]_]*\b
  exponent: '[Ee][+-]?'
  char_escape: \\x\h{2}|\\u\h{4}|\\U\h{8}|\\[0-7]{3}|\\.
  heading: '#+\s*.*\w'

contexts:
  prototype:
    - include: match-comments

  main:
    - include: match-numbers
    - include: match-chars
    - include: match-strings
    - include: match-idents
    - include: match-operators
    - include: match-punctuation

  match-numbers:
    - include: match-floats
    - include: match-integers

  match-floats:
    - include: match-floats-without-fraction
    - include: match-floats-with-fraction

  match-floats-without-fraction:
    - match: \d+({{exponent}})\d+
      scope: constant.numeric.float.mox
      captures:
        1: punctuation.separator.exponent.mox

  match-floats-with-fraction:
    - match: \d+(\.)\d+(?:({{exponent}})\d+)?
      scope: constant.numeric.float.mox
      captures:
        1: punctuation.separator.decimal.mox
        2: punctuation.separator.exponent.mox

  match-integers:
    - include: match-integers-bin
    - include: match-integers-oct
    - include: match-integers-hex
    - include: match-integers-dec

  match-integers-bin:
    - match: (0b)[01]+(?=\D)
      scope: constant.numeric.binary.mox
      captures:
        1: punctuation.definition.numeric.binary.mox

  match-integers-oct:
    - match: (0o)[0-7]+(?=\D)
      scope: constant.numeric.octal.mox
      captures:
        1: punctuation.definition.numeric.octal.mox

  match-integers-hex:
    - match: (0[x])\h+
      scope: constant.numeric.hex.mox
      captures:
        1: punctuation.definition.numeric.hexadecimal.mox

  match-integers-dec:
    - match: \d+
      scope: constant.numeric.integer.mox

  match-chars:
    - match: \'[^']*'
      scope: constant.character.mox

  match-strings:
    - include: match-strings-double
    - include: match-strings-grave

  match-strings-double:
    - match: '"'
      scope: punctuation.definition.string.begin.mox
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.mox
        - match: '"'
          scope: punctuation.definition.string.end.mox
          pop: true
        - match: '{{char_escape}}'
          scope: constant.character.escape.mox

  match-strings-grave:
    - match: '`'
      scope: punctuation.definition.string.begin.mox
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.other.mox
        - match: '`'
          scope: punctuation.definition.string.end.mox
          pop: true

  # TODO reconsider delimiters. Note that supporting nested comments requires
  # opening and closing delimiters to differ.
  match-comments:
    - match: '(\(\()\s*({{heading}})'
      captures:
        1: punctuation.definition.comment.begin.mox
        2: markup.heading.mox
      push: pop-comment
    - match: '\(\('
      scope: punctuation.definition.comment.begin.mox
      push: pop-comment

  pop-comment:
    - meta_scope: comment.block.mox
    - match: '\)\)'
      scope: punctuation.definition.comment.end.mox
      pop: true
    - match: '^({{heading}})'
      captures:
        1: markup.heading.mox
    - include: match-comments

  match-idents:
    - match: '{{ident}}'
      scope: variable.other.mox

  match-operators:
    - match: '[~!@#$%^&*:<>.?/\\|=+-]+'
      scope: keyword.operator.mox

  match-punctuation:
    - include: match-braces

  match-braces:
    - match: \{
      scope: punctuation.section.braces.begin.mox
      push:
        - match: \}
          scope: punctuation.section.braces.end.mox
          pop: true
        - include: main
    - match: \}
      scope: punctuation.section.braces.end.mox invalid.illegal.mox

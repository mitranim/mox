| # Overview
|
| Syntax based on indents and newlines. This file describes the base syntax
| which is incomplete, and which is shared and extended by multiple candidates.
| See the sibling sketch files.
|
| Goals:
|
|   * No delimiters (mostly).
|     * Nested calls may still require delimiters for grouping.
|   * No statement terminator (no semicolon).
|   * No expression terminator (no comma).
|   * No infix terminator when multi-line. Prefer newlines.
|   * Simple enough to be usable as a shell syntax.
|     * Shell syntax tend to have extremely simple and practical. Syntax of
|       general-purpose languages tends to be complicated, causing people to
|       develop custom interpreters when a shell is required (for example in
|       game engines). When a general-purpose language has a syntax simple
|       enough to be usable as a shell, all by itself, this may be a sign of
|       good design.

| # Tokens
|
| The tokenizer supports the following concepts:
|
|   * Indentation.
|   * Comments.
|   * Literal numbers.
|   * Literal strings.
|   * Identifiers.

| Example number. Multiple syntaxes may be supported.
123.456

| Example string. Multiple syntaxes may be supported.
`literal string`

| Example identifier.
some_identifier

| # Calls
|
| * Everything is callable, and everything is a call.
|   * Every expression is a call loop: the result is immediately called.
|   * Possible to evaluate a callable without calling it. See below.
|   * A callable may evaluate to itself, terminating the call loop.
|   * Atomic literals evaluate to themselves, terminating the call loop.
|   * The call loop is resolved entirely at compile time, with no runtime
|     overhead.
| * Every line has exactly one token, which is a call.
| * Every call receives a list of arguments.
|   * Arguments are the results of expressions on subsequent lines indented
|     by +1.
|     * Indenting a subsequent line by more than +1 is a parse error.
|     * Arguments are also calls, possibly with their own argument lists,
|       indented by additional +1, recursively.
|   * The first subsequent line not indented by +1 terminates the argument
|     list.

nullary_call

unary_call
  arg

binary_call
  arg0
  arg1

binary_call
  10
  20

binary_call
  `some_string_0`
  `some_string_1`

call0
  call1
    call2
      call3
    call4
      call5
      call6

| Compile error: number call is nullary.
10
  some_arg

| Compile error: string call is nullary.
`some_string`
  some_arg

| # Limitations
|
| * Every line has exactly one token.
| * Not supported: multiple tokens on one line.
| * Not supported: infix punctuation such as commas.
| * Not supported: outer delimiters such as parens.
| * Not supported: infix operators.
| * Not supported: namespace lookups (like `one.two.three`).
|   * Therefore methods are not supported.
|
| The inability to group arguments or nested expressions on a single line is
| cosmetic. We could write multiline-only code, at the cost of more lines and
| lower density.
|
| The inability to use namespacing and methods is not cosmetic. We need these
| features. Therefore, we must extend the base syntax. There are multiple
| candidates. See the sibling files.

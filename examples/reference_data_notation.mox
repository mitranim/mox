; # Level 1: Data Notation
;
; The first level of the syntax defines a "data notation": literal syntax for
; various primitive types and nestable blocks. This level is not aware of any
; language specifics. It has NO reserved keywords, operators, or special
; constants such as `true` or `false`.
;
; Editors should implement a simplified syntax highlighter for the data
; notation, independent of any language or configuration defined in terms of
; it. This could be useful for future DSLs.
;
; The provided tooling must include a parser and a formatter.
;
; The parser must preserve comments. This is essential for code formatting,
; generating documentation, or automatically editing configuration files.
;
; The parser must preserve enough information for automatic code formatting and
; rewriting. This may require preserving all whitespace, or at least the counts
; of subsequent newlines. Non-whitespace tokens must be printable back exactly
; as they were written.
;
; The parser API should include an option to parse exactly one syntactic form
; out of the input, instead of the entire input; could be useful for embedding
; this notation in some other syntax.
;
; This notation is defined in terms of Unicode characters, independently of any
; text encoding. Specific parser implementations may restrict input to UTF-8
; text. Specific language implementations may restrict literal strings to UTF-8.
;
; This notation currently doesn't define a way to embed binary data. It's
; possible instead to use base64 strings (language-independent but not
; self-describing) or literal byte array constructors (self-describing but
; language-specific).

; ## Comments
;
; Comments start with ; and are always single-line.
;
; By convention, comments must start with exactly one ; followed by at least one
; space. This should be enforced by the formatter:
;
;     ; some text, some text
;
; The formatter should allow extra leading spaces, which is useful for code
; snippets and other ASCII art.
;
; The formatter should collapse multiple leading ;;; into one ; to prevent
; unnecessary conventions.
;
; Comments may be used to generate documentation, following the conventions
; established by Go, Swift, Rust. Comments should use Markdown. A comment
; immediately followed by a named definition serves as the documentation for
; that definition.
;
; As mentioned above, comments must be preserved in the AST. If a language
; defined in terms of this notation has an interpreted form with a REPL, the
; docs generated from the comments might be made accessible in the REPL.

; ## Numbers
;
; Numbers must be parsed with unlimited precision, in order to support untyped
; numeric constants and "big number" literals. The AST must preserve the
; information required to print the number back exactly as it was written.
;
; The notation supports several radices. Every radix allows integers and
; fractionals.
; 
; The popular Ne+N exponent notation is not supported until its syntax is
; finalized.
;
; Letters in number literals must be lowercase. Uppercase is reserved for
; potential arbitrary-base exponents; see above about Ne+N.
;
; Number literals don't include leading `-` `+` signs. Those may be implemented
; separately as unary operators by a given language defined in terms of this
; notation.

; Binary
0b01 0b01.01

; Octal
0o01234567 0o01234567.01234567

; Hex
0h0123456789abcdef 0h0123456789abcdef.0123456789abcdef

; Decimal
0123456789 0123456789.0123456789

; ### Parsing Restrictions
;
; To avoid ambiguities and reserve space for future extensions, the parser must
; reject identifier characters immediately following a number, if they're not
; valid digits for its radix. This automatically rejects unknown radix
; specifiers, as they appear to be malformed decimals. This restriction must
; also be applied immediately after a known radix specifier.
;
;   0b012         ; Invalid.
;   0123456789_   ; Invalid.
;   0123456789a   ; Invalid.
;   0123456789e10 ; Invalid.
;   0b            ; Invalid.
;   0b2           ; Invalid.
;   0o            ; Invalid.
;   0o8           ; Invalid.
;   0h            ; Invalid.
;   0hg           ; Invalid.
;   0x            ; Invalid.
;   0x0           ; Invalid.
;
; To avoid ambiguities, the parser must reject a dot immediately followed by a
; decimal digit, regardless of other preceding tokens. Comments and strings are
; exempt.
;
;   .0123456789   ; Invalid.
;   ..0123456789  ; Invalid.
;   ...0123456789 ; Invalid.
;   . 0123456789  ; Valid.
;   . abcdef      ; Valid.
;
; To avoid ambiguities, the parser must reject a number ending with a dot which
; is not immediately followed by a digit appropriate for its radix.
;
;   0b01.         ; Invalid.
;   0b01.2        ; Invalid.
;   0123456789.   ; Invalid.
;   0123456789.a  ; Invalid.
;
;   0b01.0        ; Valid.
;   0b01 .        ; Valid.
;   0b01 . 2      ; Valid.
;   0123456789.0  ; Valid.
;   0123456789 .  ; Valid.
;   0123456789 .a ; Valid.
;
; ### Characters
;
; Character literals are currently not supported. They're avoidable and present
; interoperation problems.
;
; One common approach is to define a function that takes a string and returns a
; Unicode code point. Python example:
;
;     ord("a")
;     # 97
;
; In a compiled language we could validate and evaluate this at compile time.
; Thus, we avoid unnecessary syntax at no runtime cost. This approach is also
; more flexible: you could define multiple functions, tailored for specific use
; cases.
;
; Characters don't necessarily "cost" us syntactic space, because we could give
; them "dead" syntactic space from number literals, something like:
;
;     0ca 0_a
;
; But string literals seem simpler.
;
; Interoperation problems arise for a theoretic cross-language data notation,
; like JSON or XML. Many popular languages don't have a character type nor
; character literals, so you would end up banning character literals from data
; exchange formats. It seems simpler to just avoid them.
;
; Note that a language defined in terms of this notation could have a character
; _type_ even without character _literals_.

; ## Strings
;
; All string literals are multi-line. Single quotes are currently not supported
; and generate a parse error.
;
; There's no special support for string interpolation. Languages defined in
; terms of this notation may choose to implement some form of interpolation or
; C-printf-like formatting via macros.

; Double-quoted strings support escapes.
;
; The parser must preserve the information required to print the string back
; exactly as it was written. This means the parser must recognize escape
; sequences, but avoid converting them to the corresponding characters.
"
double string:
supports newlines and escapes: \t \n
"

; Grave-quoted strings don't support escapes.
`
grave string:
supports newlines, but not escapes: \t \n
`

; ## Identifiers
;
; Identifiers have C-like restrictions: only US ASCII Latin alphanumerics,
; starting with a letter. There are NO RESERVED KEYWORDS in this notation.
;
; None of these have any special meaning.
arbitrary_ident true false nil self

; ## Operators
;
; All of these characters, in any combination of any length, are considered
; operators. There are NO predefined operators.
~ ! @ # $ % ^ & * : < > . ? / \ | = + -
~! @# $% ^& *: <> .? /\ |= +-

; Operators must be separated from each other by whitespace, delimiters, or
; other forms. Operators and other forms can be adjacent, but intermediary
; whitespace can be preferred for readability.
- + == ...
10 + 20 + 30
10+20+20
one.two.three

; This notation doesn't support commas and discourages unnecessary punctuation.
; Statements, expressions, elements in data structures, and arguments in
; function calls (see below) rely on whitespace for separation.

; ## Blocks
;
; The base notation supports () [] {}, which are parsed as arbitrary sequences.
; There are no special rules about their content. Languages defined in terms of
; this notation may impose their own rules, such as using only one pair of
; delimiters.

() [] {}
([10 "20"] {30 "40" (blah)})

; ## Calling
;
; The base data notation doesn't define a convention for function calls.
; Languages are free to choose their own. The syntax highlighting for this
; format should not attempt to detect "calls", leaving this to specific
; languages.
;
; Some examples:

; Outside-block call notation:
some_func(arg arg arg)
some_func[arg arg arg]
some_func{arg arg arg}

; Inside-block call notation:
(some_func arg arg arg)
[some_func arg arg arg]
{some_func arg arg arg}

; Infix-based call notation:
some_func: arg arg arg
some_func! arg arg arg

; Freeform call notation:
some_func arg arg arg

; A language may require operators to follow the function call notation:
+(10 20 30)
[+ 10 20 30]
+ : 10 20 30

; A language is free to define operators as prefix, infix, or postfix, with its
; own precedence and grouping rules.
10 + 20 - 30
@ref += 10

; Because this notation doesn't support commas and discourages unnecessary
; punctuation, unary operators might require grouping to disambiguate them from
; binary infix:
10 - (- 20)

; ## Serialization
;
; This notation can be specialized to describe simple data, like JSON:

["value0" "value1" "value2"]
{"key0" 123 "key1" 456 "key2" 789}
{"key0" true "key1" false "key2" nil}

; However, it's much more flexible than that.
;
; JSON is self-describing for dynamic languages when using a small number of
; built-in types. For typed languages, JSON is not self-describing, and lacks
; the fluency to annotate values with types.
;
; This notation can be specialized to represent arbitrary types by using
; the "call" / "constructor" convention. This allows a much richer set of types
; compared to JSON. In this sense, our notation is closer to XML than JSON. But
; compared to XML, it's MUCH easier to write and read, and has a richer set of
; primitive building blocks, not just strings.

; Lists:

["value0" "value1" "value2"]

List("value0" "value1" "value2")

(List "value0" "value1" "value2")

:("value0" "value1" "value2")

(: "value0" "value1" "value2")

; Sets:

Set("value0" "value1" "value2")

(Set "value0" "value1" "value2")

; Dicts:

{"key0" 123 "key1" 456 "key2" 789}

Dict("key0" 123 "key1" 456 "key2" 789)

Dict(
  "key0" 123
  "key1" 456
  "key2" 789
)

::(
  "key0" 123
  "key1" 456
  "key2" 789
)

; Datetime:

Time("1234-12-34T01:02:03Z")

; Arbitrary XML:

html(
  document(
    ::(attr0 "value0" attr1 123)

    span(
      ::(attr2 "value2" "data-attr" 456)

      "namespace:element"("text node")
    )
  )
)

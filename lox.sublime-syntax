%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - lox
scope: source.mox.lox

variables:
  comment_block_start: \[
  comment_block_end: \]
  block_start: \(
  block_end: \)

  ident_any: \b[[:alpha:]_][[:alnum:]_]*\b
  ident_const: \b[[:upper:]][[:upper:][:digit:]_]*[[:upper:]][[:upper:][:digit:]_]*\b
  ident_type: \b[[:upper:]][[:alnum:]_]*\b
  ident_other: \b[[:lower:]_][[:alnum:]_]*\b

  # `this` is included for the JS dialect. Should be removed after splitting
  # the dialects. Shouldn't be used for parameters.
  self: \b(?:self|this)\b

  # Only for single-line lookahead.
  inline_comment: /[*](?:[^*]|[*](?!/))*[*]/

  # Whitespace and block comments on a single line.
  # This should only be used for lookahead, not for capturing / scoping.
  noise: (?:\s|{{inline_comment}})*

  exponent: '[Ee][+-]?'
  char_escape: \\x\h{2}|\\u\h{4}|\\U\h{8}|\\[0-7]{3}|\\.

contexts:
  prototype:
    - include: match-comments

  main:
    - include: match-numbers
    - include: match-strings
    - include: match-idents
    - include: match-operators
    - include: match-blocks

  match-numbers:
    - include: match-floats
    - include: match-integers

  match-floats:
    - include: match-floats-without-fraction
    - include: match-floats-with-fraction

  match-floats-without-fraction:
    - match: \d+({{exponent}})\d+
      scope: constant.numeric.float.mox.lox
      captures:
        1: punctuation.separator.exponent.mox.lox

  match-floats-with-fraction:
    - match: \d+(\.)\d+(?:({{exponent}})\d+)?
      scope: constant.numeric.float.mox.lox
      captures:
        1: punctuation.separator.decimal.mox.lox
        2: punctuation.separator.exponent.mox.lox

  match-integers:
    - include: match-integers-bin
    - include: match-integers-oct
    - include: match-integers-hex
    - include: match-integers-dec

  match-integers-bin:
    - match: (0b)[01]+(?=\D)
      scope: constant.numeric.binary.mox.lox
      captures:
        1: punctuation.definition.numeric.binary.mox.lox

  match-integers-oct:
    - match: (0o)[0-7]+(?=\D)
      scope: constant.numeric.octal.mox.lox
      captures:
        1: punctuation.definition.numeric.octal.mox.lox

  match-integers-hex:
    - match: (0[x])\h+
      scope: constant.numeric.hex.mox.lox
      captures:
        1: punctuation.definition.numeric.hexadecimal.mox.lox

  match-integers-dec:
    - match: \d+
      scope: constant.numeric.integer.mox.lox

  match-strings:
    - include: match-strings-double
    - include: match-strings-grave

  match-strings-double:
    - match: '"'
      scope: punctuation.definition.string.begin.mox.lox
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.mox.lox
        - match: '"'
          scope: punctuation.definition.string.end.mox.lox
          pop: true
        - match: '{{char_escape}}'
          scope: constant.character.escape.mox.lox

  match-strings-grave:
    - match: '`'
      scope: punctuation.definition.string.begin.mox.lox
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.other.mox.lox
        - match: '`'
          scope: punctuation.definition.string.end.mox.lox
          pop: true

  match-comments:
    - include: match-comments-block

  match-comments-block:
    - match: '{{comment_block_start}}\s*((#+).*\S)\s*{{comment_block_end}}'
      scope: comment.block.mox.lox
      captures:
        1: markup.heading.mox.lox
        2: punctuation.definition.comment.begin.mox.lox
    - match: '{{comment_block_start}}'
      scope: punctuation.definition.comment.begin.mox.lox
      push: pop-comment-block

  pop-comment-block:
    - meta_scope: comment.block.mox.lox
    - match: '{{comment_block_end}}'
      scope: punctuation.definition.comment.end.mox.lox
      pop: true
    - include: match-comment-block-multiline-headings
    - include: match-comments

  match-comment-block-multiline-headings:
    - match: '^#+'
      scope: punctuation.definition.heading.begin.mox.lox
      push: pop-comment-block-multiline-heading

  pop-comment-block-multiline-heading:
    - meta_scope: markup.heading.mox.lox
    - match: (?={{comment_block_end}}|$)
      pop: true

  match-idents:
    - include: match-idents-consts-lang
    - include: match-idents-consts
    - include: match-idents-types
    - include: match-idents-other

  match-idents-consts-lang:
    - include: match-bools
    - include: match-nil
    - include: match-self

  match-bools:
    - match: \b(?:true|false)\b
      scope: constant.language.mox.lox

  match-nil:
    - match: \bnil\b
      scope: constant.language.mox.lox

  match-self:
    - match: '{{self}}'
      scope: constant.language.mox.lox

  match-idents-consts:
    - match: '{{ident_const}}'
      scope: variable.other.constant.mox.lox

  match-idents-types:
    - match: '{{ident_type}}'
      scope: storage.type.mox.lox

  match-idents-other:
    - match: '{{ident_any}}'
      scope: variable.other.mox.lox

  match-operators:
    - match: '[~!@#$%^&*:<>.?/\\|=+-]+'
      scope: keyword.operator.mox.lox

  match-blocks:
    - match: '{{block_start}}'
      scope: punctuation.section.block.begin.mox.lox
      push: pop-block-head
    - match: '{{block_end}}'
      scope: punctuation.section.block.end.mox.lox invalid.illegal.mox.lox

  pop-block-head:
    - match: '{{block_end}}'
      scope: punctuation.section.block.end.mox.lox
      pop: true
    - include: match-block-head-keywords
    - include: match-block-head-idents
    - match: (?=\S)
      set: pop-block-tail

  pop-block-tail:
    - match: '{{block_end}}'
      scope: punctuation.section.block.end.mox.lox
      pop: true
    - include: main

  match-block-head-keywords:
    - include: match-block-head-fn
    - include: match-block-head-func
    - include: match-block-head-if
    - include: match-block-head-case
    - include: match-block-head-try
    - include: match-block-head-ret
    - include: match-block-head-type

  # Incomplete: doesn't account for infix dot.
  match-block-head-idents:
    - match: '{{ident_other}}'
      scope: variable.function.mox.lox
      set: pop-block-tail

  match-block-head-fn:
    - match: \bfn\b
      scope: storage.type.keyword.function.mox.lox
      set: pop-fn-0

  # Expecting maybe name, then params.
  pop-fn-0:
    - include: pop-on-block-end
    - match: '{{ident_any}}'
      scope: entity.name.function.fn.mox.lox
      set: pop-fn-2
    - match: (?={{block_start}})
      set: pop-fn-2
    - include: main

  # Expecting params.
  pop-fn-2:
    - include: pop-on-block-end
    - match: '{{block_start}}'
      scope: punctuation.section.block.begin.mox.lox
      set: pop-fn-3
    - include: main

  # Params.
  pop-fn-3:
    - match: '{{block_end}}'
      scope: punctuation.section.block.end.mox.lox
      set: pop-fn-4
    - match: \bself\b
      scope: variable.parameter.mox.lox constant.language.mox.lox
    - match: '{{ident_other}}'
      scope: variable.parameter.mox.lox
    - include: main

  pop-fn-4:
    - include: pop-on-block-end
    - include: main

  match-block-head-func:
    - match: \bfunc\b
      scope: storage.type.keyword.function.mox.lox
      set: pop-func-0

  # Expecting maybe name, then params.
  pop-func-0:
    - include: pop-on-block-end
    - match: '{{ident_other}}'
      scope: entity.name.function.func.mox.lox
      set: pop-func-2
    - match: (?={{block_start}})
      set: pop-func-2
    - include: main

  # Expecting params.
  pop-func-2:
    - include: pop-on-block-end
    - match: '{{block_start}}'
      scope: punctuation.section.block.begin.mox.lox
      set: pop-func-3
    - include: main

  # Params.
  pop-func-3:
    - match: '{{block_end}}'
      scope: punctuation.section.block.end.mox.lox
      set: pop-func-5
    - match: \bself\b
      scope: variable.parameter.mox.lox constant.language.mox.lox
    - match: '{{ident_other}}'
      scope: variable.parameter.mox.lox
    - include: main

  pop-func-5:
    - include: pop-on-block-end
    - include: main

  match-block-head-if:
    - match: \bif\b
      scope: keyword.control.conditional.if.mox.lox
      set: pop-if-0

  pop-if-0:
    - include: pop-on-block-end
    - match: \b(?:then|elif|else)\b
      scope: keyword.control.conditional.mox.lox
    - include: main

  match-block-head-case:
    - match: \bcase\b
      scope: keyword.control.conditional.case.mox.lox
      set: pop-case-0

  pop-case-0:
    - include: pop-on-block-end
    - match: \b(?:when|then|else)\b
      scope: keyword.control.conditional.mox.lox
    - include: main

  match-block-head-try:
    - match: \btry\b
      scope: keyword.control.exception.try.mox.lox
      set: pop-try-0

  pop-try-0:
    - include: pop-on-block-end
    - match: \bcatch\b
      scope: keyword.control.exception.catch.mox.lox
    - match: \bfinally\b
      scope: keyword.control.exception.finally.mox.lox
    - include: main

  match-block-head-ret:
    - match: \bret\b
      scope: keyword.control.flow.return.mox.lox
      set: pop-block-tail

  match-block-head-type:
    - match: \btype\b
      scope: storage.type.keyword.type.nox
      set: pop-type-0

  # Incomplete: should also allow a block starting with a type name.
  # (Generic type instantiation.)
  pop-type-0:
    - include: pop-on-block-end
    - match: '{{ident_type}}'
      scope: entity.name.type.nox
      set: pop-type-1
    - include: main

  pop-type-1:
    - include: pop-on-block-end
    - include: main

  pop-before-nonblank:
    - match: (?=\S)
      pop: true

  pop-on-block-end:
    - match: '{{block_end}}'
      scope: punctuation.section.block.end.mox.lox
      pop: true

(( # Level 1: see `reference_data_notation.mox`! ))

(( # Level 2: Language ))

((
This level represents the syntax of a hypothetical language, which is defined
in terms of the Level 1 data notation. It doesn't add anything that would
require changing the parser.
))

(( ## General Structure ))

((
Everything is either a primitive literal, an ident or operator, or a block
enclosed in {} braces. Braces are the only delimiter; () [] are not used.

The only punctuation is {} and the infix dot accessor. There is no comma or
semicolon. The language is whitespace-insensitive, but space must be used to
separate literals, symbols, operators and so on.

{} must always be preceded by something, and always represents some kind of
"call", such as: function call, method call, operator call, macro invocation,
instantiating a generic type, type constructor literal, type cast, type
conversion, or one of various special forms. See examples in other sections.
))

some_func{
  some_val.some_method{10 "20"}
  block{
    some_func{some_func{10 "20"} 30}
    some_func{10 "20"}
  }
}

some_val.some_method{}.some_method{}.some_method{}

String_dict_type{"key0" "value0" "key1" "value1"}

Array{16 Int}

((
To use a block as an expression, we provide the special form `block`. It creates
a subscope, contains multiple statements, and returns its last expression.

This is a function call with a single argument.
))
fmt.println{
  (( This block is an expression. ))
  block{
    (( Side effect. ))
    fmt.println{"hello world"}
    (( Return value. ))
    "20"
  }
}

(( ## Naming Convention ))

((
* Constants use `UPPER_SNAKE_CASE`.
* Type names use `Capital_snake_case`.
* Other identifiers use `snake_case`.

To avoid ambiguity, constant names must have at least two letters.

Other case styles should be forbidden by the compiler and automatically changed
by the formatter.
))
CONSTANT_UPPER_SNAKE_CASE
Type_capital_snake_case
ident_snake_case

((
Abbreviations are considered regular words and obey the regular casing rules.
))
json_encode
json_decode
Json_encoder
Json_decoder

((
Boolean variables, functions, struct fields should start with `is_`:
))
var{is_deleted true}
fn{is_deleted{val} val.is_deleted}

(( ## Calling ))

((
An identifier followed by braces may invoke a function, a macro, a special
syntactic form, or a type conversion.
))
some_func{arg0 arg1 ...}
some_ident.some_method{arg0 arg1 ...}
some_macro{expressions}
some_type{some_val}

((
Function calls, operators, boolean expressions, everything uses the prefix
notation with braces:
))
+{one two}
and{one or{two three}}

((
The dot property accessor is the only infix operator:
))
one.two.three
some_func{}.some_method{}.some_method{}.some_field

(( ## Function Definitions ))

((
`fn` has full type inference. Parameter and return types can't be specified. The
function can optionally be named. A named function used as a statement, rather
than as an expression, is added to the scope under that name.
))

(( Empty function. ))
fn{{}}

fn{{a b} +{a b}}

fn{add{a b} +{a b}}}

fn{sum{coll} coll.fold{0 fn{{a b} +{a b}}}}

((
`func` has no type inference. Parameter and return types must be fully
specified. The function can optionally be named. A named function used as a
statement, rather than as an expression, is added to the scope under that name.

The return type must be specified after parameters, enclosed in `ret{...}`.
))

(( Empty function. ))
func{{}}

func{{a T b T} ret{T} +{a b}}

func{
  add{a T b T} ret{T}
  +{a b}
}

func{
  opt_add{a Opt{T} b Opt{T}} ret{Opt{T}}
  match{
    when{a Opt{T} b Opt{T}} then Some{+{a b}}
    else None
  }
}

((
The syntax for method definitions is still in flux and needs more careful
consideration:
))

func{
  some_method{self Some_type param0 Other_type} ret{Another_type}
  self.other_method{}
  self.other_method{}
}

func{
  some_method{self Ref{Some_type} param0 Other_type} ret{Another_type}
  self.other_method{}
  self.other_method{}
}

func{
  Some_type.some_method{param0 Other_type} ret{Another_type}
  self.other_method{}
  self.other_method{}
}

func{
  Ref{Some_type}.some_method{param0 Other_type} ret{Another_type}
  self.other_method{}
  self.other_method{}
}

((
Neither `fn` nor `func` is a reserved keyword, as there are NO reserved
keywords. They can be used for variables, functions, struct fields, and more.
))
var{func func{{}}}
type{Struct_with_func struct{func Func{}}}

(( ## Type Literals ))

Some_type

some_module.Some_type

(( Anonymous struct type. ))
struct{
  field0 Type0
  field1 Type1
}

((
Generic types specify their "parameter types" in {}.
))
Tuple{Some_type Some_type Some_type}
Array{16 Byte}
Slice{Byte}
Slice{Slice{Byte}}
Dict{String Some_type}
Dict{Array{16 Byte} Dict{String Slice{Byte}}}

((
Variant type / tagged union type.
))
variant{
  Variant0 Some_type
  Variant1 Other_type
}

((
Function type.
))
Func{{Type0 Type1} ret{Type2}}

(( ## Type Definitions ))

((
`type` defines a named type. It must begin with a type name, immediately
followed by a type literal.
))
type{
  Parse_state struct{
    string String
    trail  Int
    cursor Int
    ast    Nodes
  }
}

((
The right hand side of a type definition can be any type, either anonymous or
named. The defined type will have the same underlying memory structure, field
names, and so on.
))
type{Some_type Other_type}

((
Generic types specify their parameters in {}.
))
type{
  Opt{T} variant{
    Some Tuple{T}
    None Tuple{}
  }
}

((
Generic types can specify conditions for parameter types.
))
type{
  Either{A B}
  variant{
    Ok A
    Err B
  }
  where{
    B{Error}
  }
}

((
`type` is not a reserved keyword, as there are NO reserved keywords. It can be
used for variables, functions, struct fields, and more.
))
var{type "blah"}
type{Some_type struct{type String}}

((
We can associate metadata with each type, and with each field of each type.
Public/private is part of that metadata. Public is the default, private is
opt-in.

In this example the syntax is probably too long, but that's fixable.
))
type{
  Some_struct struct{
    field_one   String
    field_two   Int8
    field_three Bool
    lock        sync.mutex
  }
  meta{
    field_one   Dict{"json" "fieldOne"   "db" "field_one"}
    field_two   Dict{"json" "fieldTwo"   "db" "field_two"}
    field_three Dict{"json" "fieldThree" "db" "field_three"}
    lock        Dict{"private" true}
  }
}

(( ## Instantiating Types ))

Some_slice{10 20 30}

Slice{Int}{10 20 30}

Some_dict{
  "one"   10
  "two"   20
  "three" 30
}

Some_struct{
  one   10
  two   20
  three 30
}

(( ## Macros ))

((
The language supports macros. Macros are functions interpreted by the compiler.
They take AST and return AST.

Macros should have access to the scope information including available
variables, functions, types, imported modules, etc., as well as metadata about
each expression, such as its type.

Technically, macros might not be limited to just AST operations. There might be
other interesting uses, for example involving IO.
))

((
Convention: for compatibility with syntax highlighting and symbol indexing,
name-defining macros should always wrap one of the well-known name-defining
forms.
))

(( Bad ))
special_fn{fn_name{} {}}

(( Good ))
special{fn{fn_name{} {}}}

((
Example SQL generation with a macro. This hypothetical `sql_query` macro
supports argument substitution (default) and text interpolation (opt-in).
Arguments are replaced with positional placeholders and added to the argument
slice. The returned object contains text and arguments.
))

var{table_name "persons"}

var{id random_uuid{}}

sql_query{`
  select col0, col1, col2
  from ` text{table_name} `
  where
    id = ` id ` and
    not is_deleted
`}

(( Type returned by `sql_query`. ))
type{
  Sql_query struct{
    text String
    args Slice{any}
  }
}

((
Example HTML generation with a hypothetical `xml` macro. Uses {{ }} for
interpolation. The macro could be defined to return an AST or print a string.
))
xml{
  html{
    document{
      div{
        (( Attributes ))
        {attr0 "value0" attr1 "value1"}

        (( Nested element with a text node ))
        span{"text"}

        (( Text node ))
        "text"

        (( Interpolation: variable ))
        {{var0}}

        (( Interpolation: arbitry expression (function or macro) ))
        {{str{var0 var1 var2}}}
      }
    }
  }
}

(( ## Constructor Macros ))

((
It might be possible to allow "overloading" constructor syntax for user-defined
types, by associating a macro with a type, which is automatically invoked for
every literal value of that type found in source code. Untyped constants should
also work, as they preserve the original literal as-is, without loss of
information.

Example use cases:

  * A custom string type impemented as a rope, where literal values of that type
    can be written as regular strings.

  * A custom sequence type implemented as a rope, where literal values of that
    type can be written as regular slices.

  * Big integers or big floats, written using the normal numeric syntax, parsed
    with higher precision than machine numbers.
))

(( Example rope string type used below. ))
type{
  Rope_string struct{
    chunks Slice{Rope_chunk}
  }
}

type{
  Rope_chunk struct{
    len   Int
    chars Array{1024 Char}
  }
}

((
Example constructor macro for a rope string type. Overloads the string literal
syntax, replacing literal strings with literal `Rope_string` constructors. This
macro should be invoked for any string literal whose type is `Rope_string`,
either due to an explicit cast (see below), or due to type inference.

The macro is strongly typed, but its signature is inferred by the compiler.

The input value of constructor macros varies by the literal type they overload.
When overloading a string literal, they take the string's content as the input.

The output value of constructor macros must be AST representing a literal
constructor of that type, the part in {}, omitting the type identifier.

Example input:

    Rope_string{"hello world"}

Example output, if chunk size was 4 rather than 1024:

    Rope_string{
      chunks Slice{
        Rope_chunk{len 4 chars {104 101 108 108}}
        Rope_chunk{len 4 chars {111 32 119 111}}
        Rope_chunk{len 3 chars {114 108 100}}
      }
    }
))
macro_literal_string{fn{
  Rope_string{literal_string_content}

  let{chars Slice{Char} string_to_chars{literal_string_content}}

  let{char_chunks Slice{Slice{Char}} chars.split_by_length{1024}}

  quote{{
    chunks unquote{char_chunks.map{fn{{chars}
      quote{
        Rope_chunk{
          len unquote{Ast_int{chars.len}}
          chars unquote{Ast_block{chars}}
        }
      }
    }}}
  }}
}}

(( ## Variables ))

((
Note: as most of this document, this is mostly about the syntax. Variables have
many, many other semantics, which are omitted here.
))

((
`var` declares a variable, specifies its type, and assigns a value. Either type
or value may be omitted, but not both.

Syntax quirk: this relies on the `Title_snake` naming convention for types. If
we didn't have this convention, we'd have to split `var` into two keywords, one
with type inference and one without.

This is a void statement that doesn't return a value.
))
var{some_ident Some_type}
var{some_ident           "some_value"}
var{some_ident Some_type "some_value"}

((
`const` declares a constant value. Unlike variables, constants are statically
allocated and immutable. Constants may be used in compile-time calculations or
as parameters to generic types, such as array sizes. The value is mandatory and
must be calculable at compile time. The type may be inferred.

Syntax quirk: this relies on the `Title_snake` naming convention for types. If
we didn't have this convention, we'd have to split `const` into two keywords,
one with type inference and one without.

This is a void statement that doesn't return a value.
))
const{some_ident           "some_value"}
const{some_ident Some_type "some_value"}

((
`=` reassigns a variable's value. The variable must have been previously
declared.

Note that unlike some languages such as Erlang and Haskell, we must have
distinct forms for variable declaration and assignment. We intend to allow
procedural programming that involves variable reassignment. Declarations will be
block scoped, while assignments may want to modify a variable in an outer scope,
necessitating an assignment-only form.

This is a void statement that doesn't return a value.
))
={some_ident "other_value"}
